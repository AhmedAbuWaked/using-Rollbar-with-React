{"version":3,"sources":["logo.svg","Test.js","App.js","reportWebVitals.js","index.js"],"names":["Test","Error","e","Rollbar","error","_rollbarConfig","accessToken","process","captureUncaught","captureUnhandledRejections","payload","environment","client","javascript","source_map_enabled","code_version","guess_uncaught_frames","person","id","Math","random","toString","username","email","init","App","useEffect","console","log","Provider","config","ErrorBoundary","className","src","logo","alt","onClick","message","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Sentry","dsn","integrations","Integrations","BrowserTracing","tracesSampleRate","dist","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yLAAe,G,MAAA,IAA0B,kC,iDCY1BA,EATF,WACX,IACE,MAAM,IAAIC,MAAM,qCAChB,MAAOC,GACPC,IAAQC,MAAMF,GAEhB,OAAO,4CCFHG,EAAiB,CACrBC,YAAaC,mCACbC,iBAAiB,EACjBC,4BAA4B,EAC5BC,QAAS,CACPC,YAAaJ,cACbK,OAAQ,CACNC,WAAY,CACVC,oBAAoB,EACpBC,aAAcR,MACdS,uBAAuB,IAG3BC,OAAQ,CACNC,GAAIC,KAAKC,SAASC,WAClBC,SAAU,QACVC,MAAO,sBAIbpB,IAAQqB,KAAKnB,GA4DEoB,MAxDf,WAqBE,OAZAC,qBAAU,WAQRC,QAAQC,IAAIrB,OACZoB,QAAQC,IAAIrB,iBACX,IAGD,cAACsB,EAAA,EAAD,CAAUC,OAAQzB,EAAlB,SACE,cAAC0B,EAAA,EAAD,UACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,sCACO,8CADP,0BAGA,cAAC,EAAD,IACA,wBACEC,QAAS,WACP,IAEE,MADAT,QAAQC,IAAI,WACN,IAAI3B,MACR,gDAEF,MAAOC,GACPC,IAAQC,MAAMF,GACdyB,QAAQC,IACN,sDACA1B,EAAEmC,WAXV,6BClDGC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,gBCEdQ,IAAY,CACVC,IAAK,6EACLC,aAAc,CAAC,IAAIC,IAAaC,gBAChCC,iBAAkB,EAClBC,KAAM,aAGRC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BpB,M","file":"static/js/main.c0bce7c8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\r\nimport Rollbar from 'rollbar';\r\n\r\nconst Test = () => {\r\n  try {\r\n    throw new Error('This is Error From Test Component');\r\n  } catch (e) {\r\n    Rollbar.error(e);\r\n  }\r\n  return <div>Hi There</div>;\r\n};\r\n\r\nexport default Test;\r\n","import React, { useEffect, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Rollbar from 'rollbar';\nimport { Provider, ErrorBoundary, useRollbar } from '@rollbar/react';\nimport Test from './Test';\n\nconst _rollbarConfig = {\n  accessToken: process.env.REACT_APP_ACCESS_TOKEN,\n  captureUncaught: true,\n  captureUnhandledRejections: true,\n  payload: {\n    environment: process.env.REACT_APP_ENVIROMENT,\n    client: {\n      javascript: {\n        source_map_enabled: true,\n        code_version: process.env.REACT_APP_GIT_SHA,\n        guess_uncaught_frames: true\n      }\n    },\n    person: {\n      id: Math.random().toString(), // required\n      username: 'Ahmed',\n      email: 'test@example.com'\n    }\n  }\n};\nRollbar.init(_rollbarConfig);\n// const rollbar = new Rollbar(_rollbarConfig);\n// Rollbar.configure();\n\nfunction App() {\n  // const [rollbar, setRollbar] = useState(\n  //   new Rollbar({\n  //     accessToken: process.env.REACT_APP_ACCESS_TOKEN,\n  //     captureUncaught: true,\n  //     captureUnhandledRejections: true,\n  //     environment: 'development12'\n  //   })\n  // );\n  useEffect(() => {\n    //   setRollbar(\n    //     new Rollbar({\n    //       accessToken: process.env.REACT_APP_ACCESS_TOKEN,\n    //       captureUncaught: true,\n    //       captureUnhandledRejections: true\n    //     })\n    //   );\n    console.log(process.env.REACT_APP_GIT_SHA);\n    console.log(process.env.REACT_APP_ENVIROMENT);\n  }, []);\n  // useRollbar(rollbar);\n  return (\n    <Provider config={_rollbarConfig}>\n      <ErrorBoundary>\n        <div className='App'>\n          <header className='App-header'>\n            <img src={logo} className='App-logo' alt='logo' />\n            <p>\n              Edit <code>src/App.js</code> and save to reload.\n            </p>\n            <Test />\n            <button\n              onClick={() => {\n                try {\n                  console.log('Clicked');\n                  throw new Error(\n                    'This is Testing Error For Last Time Clicking'\n                  );\n                } catch (e) {\n                  Rollbar.error(e);\n                  console.log(\n                    'ðŸš€ ~ file: App.js ~ line 63 ~ App ~ Error',\n                    e.message\n                  );\n                }\n              }}\n            >\n              click\n            </button>\n          </header>\n        </div>\n      </ErrorBoundary>\n    </Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as Sentry from '@sentry/react';\nimport { Integrations } from '@sentry/tracing';\n\nSentry.init({\n  dsn: 'https://852c2cc7c6644039b60a615d98e29170@o1038745.ingest.sentry.io/6007267',\n  integrations: [new Integrations.BrowserTracing()],\n  tracesSampleRate: 1.0,\n  dist: '../build'\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}